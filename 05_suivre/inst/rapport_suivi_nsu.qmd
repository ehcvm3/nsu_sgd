---
format: html
toc: true
toc-depth: 3
lang: fr
embed-resources: true
execute:
  echo: false
  error: false
  warning: false
params:
  serveur: ""
  espace_travail: ""
---

```{r}
#| label: composer l'URL common pour le lien vers les entretiens

url_base <- httr::modify_url(
  url = params$serveur,
  path = fs::path(params$espace_travail, "Interview", "Review")
)

```

```{r}
#| label: fournir une traduction de l'interface des tableaux reactable

# reactable UI text
reactable_fr <- reactable::reactableLang(
  searchPlaceholder = "Rechercher",
  searchLabel = "Rechercher",
  noData = "Aucune ligne retrouvée",
  pageNext = "Suivant",
  pagePrevious = "Précédent",
  pageNumbers = "{page} de {pages}",
  pageInfo = "Lignes {rowStart} à {rowEnd} de {rows} lignes"
)
```

## Exhaustivité

### Nombre de marchés par strate

```{r}
#| label: nombre de marchés par strate

# ingérer les données
marches_df <- here::here("02_fusionner", "donnees", "marches.dta") |>
  haven::read_dta()

# extraire les étiquettes de valeur pour la strate
strates_lbls <- labelled::get_value_labels(marches_df$marche_strate)

# créer un tableau des strates
strates_df <- tibble::tibble(marche_strate = strates_lbls)

# compter le nombre de marchés (distincts) par strate
marches_par_strate <- marches_df |>
  dplyr::distinct(marche_strate, marche_nom) |>
  dplyr::group_by(marche_strate) |>
	dplyr::summarise(n = dplyr::n()) |>
	dplyr::ungroup()

# composer un tableau de marchés par strate
marches_par_strate_df <- strates_df |>
  dplyr::left_join(marches_par_strate, by = "marche_strate") |>
  dplyr::mutate(marche_strate = labelled::to_character(marche_strate))

marches_par_strate_tbl <- reactable::reactable(
  data = marches_par_strate_df,
  columns = list(
    marche_strate = reactable::colDef(
      header = "Strate"
    ),
    n = reactable::colDef(
      header = "Marchés",
      na = "&mdash;",
      html = TRUE
      # TODO : figure out why code doesn't work
      # docs: `https://glin.github.io/reactable/articles/conditional-styling.html#cell-styling`
      # model: `https://glin.github.io/reactable/articles/examples.html#conditional-styling`
      # ,
      # style = function(value) {
      #   if (is.na(value)) {
      #     color <- "white"
      #   } else {

      #     if (value < 3) {
      #       color <- "#F9E3D6"
      #     } else if (value > 3) {
      #       color <- "#ffd699"
      #     }

      #   }
      #   return(list(backgroundColor = color))
      # }
    )
  ),
  striped = TRUE,
  searchable = TRUE,
  language = reactable_fr
)

marches_par_strate_tbl
```

### Nombre de relevés par marché enquêté

```{r}
#| label: nombre de relevés par marché

# obtenir le chemin de la dernière version
chemin_tableaux_dir <- fs::dir_ls(
  path = here::here("01_obtenir", "01_donnees"),
  regexp = "Lookup Tables$",
  type = "directory",
  recurse = TRUE
)

chemin_tableau_de_ref <- fs::dir_ls(
  path = chemin_tableaux_dir,
  type = "file"
)

tableau_ref <- chemin_tableau_de_ref |>
	readr::read_tsv() |>
	dplyr::rename(
    produits__id = produit_code,
    unites__id = unite_code,
    tailles__id = taille_code
  ) |>
	dplyr::select(produits__id, unites__id, tailles__id)

marches_id_df <- marches_df |>
	dplyr::select(interview__id, interview__key, marche_strate, marche_nom)

mesures_df <- here::here("02_fusionner", "donnees", "tailles.dta") |>
  haven::read_dta()

n_produit_unite_taille_par_entretien <- mesures_df |>
  dplyr::filter(!unites__id %in% c(-96, -97, -98))

marches_et_releves <- marches_id_df |>
	dplyr::left_join(
    y = n_produit_unite_taille_par_entretien,
    by = c("interview__id", "interview__key")
  )

releves_par_marche <- marches_et_releves |>
  # compter les observations par marche-produit-unité-taille
	dplyr::count(marche_strate, marche_nom, produits__id, unites__id, tailles__id) |>
  # simplifier le nom des identifiants
  dplyr::rename_with(
    .cols = dplyr::ends_with("__id"),
    .fn = ~ stringr::str_replace(
      string = .x,
      pattern = "s__id",
      replacement = ""
    )
  ) |>
  # créer une colonne nom et code pour les colonnes libellées
	dplyr::mutate(
    dplyr::across(
      .cols = c(marche_strate, produit, unite, taille),
      .fns = list(
        nom = ~ labelled::to_character(.x),
        code = ~ labelled::remove_labels(.x)
      ),
      .names = "{.col}_{.fn}"
    )
  ) |>
	labelled::remove_var_label() |>
	# haven::zap_formats() |>
	dplyr::select(
    marche_strate_code, marche_strate_nom, marche_nom,
    produit_code, produit_nom,
    unite_code, unite_nom,
    taille_code, taille_nom
  )

n_releves_par_marche <- releves_par_marche |>
	dplyr::group_by(
    marche_strate_code, marche_strate_nom, marche_nom,
    produit_code, produit_nom,
    unite_code, unite_nom,
    taille_code, taille_nom
  ) |>
	dplyr::summarise(
    n_releves = dplyr::n()
  ) |>
	dplyr::ungroup()

marches_releves_sommaire <- marches_et_releves |>
	dplyr::group_by(marche_strate, marche_nom) |>
	dplyr::summarise(
    n_produits = dplyr::n_distinct(produits__id),
    n_releves = dplyr::n()
  ) |>
	dplyr::ungroup() |>
	dplyr::mutate(avg_releves_par_produit = n_releves / n_produits) |>
  dplyr::mutate(
    marche_strate_nom = labelled::to_character(marche_strate),
    marche_strate_code = labelled::remove_labels(marche_strate)
  ) |>
  labelled::remove_var_label() |>
	dplyr::select(
    marche_strate_code, marche_strate_nom, marche_nom,
    n_produits, avg_releves_par_produit
  )

marches_n_releves <- reactable::reactable(
  data = marches_releves_sommaire,
  columns = list(
    marche_strate_nom = reactable::colDef(
      header = "Strate",
      show = TRUE
    ),
    marche_strate_code = reactable::colDef(show = FALSE),
    marche_nom = reactable::colDef(
      header = "Marché",
      show = TRUE
    ),
    n_produits = reactable::colDef(
      header = "Produits retrouvés",
      show = TRUE
    ),
    avg_releves_par_produit = reactable::colDef(
      header = "Relevés moyens par produit",
      format = reactable::colFormat(digits = 2),
      show = TRUE
    )
  ),
  details = function(index) {

    # créer une base pour la ligne en cours
    releves_df <- n_releves_par_marche[
      n_releves_par_marche$marche_strate_code == marches_releves_sommaire$marche_strate_code[index] &
      n_releves_par_marche$marche_nom ==  marches_releves_sommaire$marche_nom[index]
      ,
    ]

    # mettre le sous-tableau dans un div
    htmltools::div(
      style = "padding: 1rem; margin-left: 0.75rem;",
      reactable::reactable(
        data = releves_df,
        defaultColDef = reactable::colDef(show = FALSE),
        columns = list(
          # marche_strate_code = reactable::colDef(show = FALSE),
          # marche_strate_nom = reactable::colDef(show = FALSE),
          # marche_nom = reactable::colDef(show = FALSE),
          produit_nom = reactable::colDef(
            header = "Produit",
            show = TRUE
          ),
          unite_nom = reactable::colDef(
            header = "Unité",
            show = TRUE
          ),
          taille_nom = reactable::colDef(
            header = "Taille",
            show = TRUE
          ),
          n_releves = reactable::colDef(
            header = "Relevés",
            show = TRUE
          )
        ),
        searchable = TRUE,
        language = reactable_fr
      )
    )

  },
  striped = TRUE,
  searchable = TRUE,
  language = reactable_fr
)

marches_n_releves
```

## Cohérence

```{r}
#| label: préparation des données

mesures_avec_marches <- marches_id_df |>
	dplyr::left_join(
    y = mesures_df,
    by = c("interview__id", "interview__key")
  )

```

```{r}
#| label: créer une fonction pour faire ressortir les problèmes

identifier_mesures_inconsistentes <- function(
  df,
  var
) {

  df_prob <- df |>
    dplyr::filter(!tailles__id %in% c(0, -96, -97)) |>
    # also product
    dplyr::arrange(interview__id, produits__id, unites__id, tailles__id) |>
    dplyr::group_by(
      interview__id, interview__key,
      marche_strate, marche_nom,
      produits__id, unites__id
    ) |>
    dplyr::mutate(
      consistent = dplyr::if_else(
        condition = dplyr::row_number() != 1,
        true = {{var}} > dplyr::lag({{var}}, n = 1L),
        false = TRUE,
        missing = FALSE
      )
    ) |>
    dplyr::ungroup() |>
    dplyr::filter(consistent == FALSE) |>
    dplyr::select(
      interview__id, interview__key,
      produits__id, unites__id
    )

  df_unites_avec_prob <- df |>
    dplyr::semi_join(
      y = df_prob,
      by = dplyr::join_by(
        interview__id, interview__key,
        produits__id, unites__id
      )
    ) |>
    dplyr::mutate(
      dplyr::across(
        .cols = c(marche_strate, produits__id, unites__id, tailles__id),
        .fns = ~ labelled::to_character(.x, levels = "prefixed")
      ),
      lien_entretien = glue::glue("{url_base}/{interview__id}"),
      interview__key = glue::glue("<a href='{lien_entretien}'>{interview__key}</a>")
    ) |>
    dplyr::select(
      interview__key,
      marche_strate, marche_nom,
      produits__id, unites__id,
      produits__id, unites__id, tailles__id,
      {{var}}
    )

  return(df_unites_avec_prob)

}

```

### Poids

```{r}
#| label: créer les données du tableau d'inconsistences du poids

inconsistences_poids <- identifier_mesures_inconsistentes(
  df = mesures_avec_marches,
  var = q108_poids
)

marches_avec_inconsistences_poids <- inconsistences_poids |>
	dplyr::group_by(marche_strate, marche_nom) |>
	dplyr::summarise(
    n_unites = dplyr::n_distinct(unites__id)
  ) |>
	dplyr::ungroup()

```

```{r}
#| label: composer le tableau d'inconsistences du poids

mesures_poids_inconsistentes <- reactable::reactable(
  data = marches_avec_inconsistences_poids,
  columns = list(
    marche_strate = reactable::colDef(header = "Strate"),
    marche_nom = reactable::colDef(header = "Marché"),
    n_unites = reactable::colDef(header = "N. unités à problème")
  ),
  details = function(index) {

    # extraire les observations relatives à l'indice en cours
    inconsistences_poids_marche <- inconsistences_poids[
      inconsistences_poids$marche_strate == marches_avec_inconsistences_poids$marche_strate[index] &
      inconsistences_poids$marche_nom == marches_avec_inconsistences_poids$marche_nom[index],
    ]

    # composer le tableau imbriqué avec les détails sur les mesures
    htmltools::div(
      style = "padding: 1rem; margin-left: 0.75rem;",
      reactable::reactable(
        data = inconsistences_poids_marche,
        columns = list(
          interview__key = reactable::colDef(
            header = "Entretien",
            html = TRUE
          ),
          marche_strate = reactable::colDef(show = FALSE),
          marche_nom = reactable::colDef(show = FALSE),
          produits__id = reactable::colDef(header = "Produit"),
          unites__id = reactable::colDef(header = "Unité"),
          tailles__id = reactable::colDef(header = "Taille"),
          q108_poids = reactable::colDef(header = "Poids")
        ),
        striped = TRUE,
        language = reactable_fr
      )
    )
  },
  striped = TRUE,
  language = reactable_fr
)

mesures_poids_inconsistentes
```

### Prix

```{r}
#| label: créer les données du tableau d'inconsistences du prix

inconsistences_prix <- identifier_mesures_inconsistentes(
  df = mesures_avec_marches,
  var = q108_prix
)

marches_avec_inconsistences_prix <- inconsistences_prix |>
	dplyr::group_by(marche_strate, marche_nom) |>
	dplyr::summarise(
    n_unites = dplyr::n_distinct(unites__id)
  ) |>
	dplyr::ungroup()

```

```{r}
#| label: composer le tableau d'inconsistences du prix

mesures_prix_inconsistentes <- reactable::reactable(
  data = marches_avec_inconsistences_prix,
  columns = list(
    marche_strate = reactable::colDef(header = "Strate"),
    marche_nom = reactable::colDef(header = "Marché"),
    n_unites = reactable::colDef(header = "N. unités à problème")
  ),
  details = function(index) {

    # extraire les observations relatives à l'indice en cours
    inconsistences_prix_marche <- inconsistences_prix[
      inconsistences_prix$marche_strate == marches_avec_inconsistences_prix$marche_strate[index] &
      inconsistences_prix$marche_nom == marches_avec_inconsistences_prix$marche_nom[index],
    ]

    # composer le tableau imbriqué avec les détails sur les mesures
    htmltools::div(
      style = "padding: 1rem; margin-left: 0.75rem;",
      reactable::reactable(
        data = inconsistences_prix_marche,
        columns = list(
          interview__key = reactable::colDef(
            header = "Entretien",
            html = TRUE
          ),
          marche_strate = reactable::colDef(show = FALSE),
          marche_nom = reactable::colDef(show = FALSE),
          produits__id = reactable::colDef(header = "Produit"),
          unites__id = reactable::colDef(header = "Unité"),
          tailles__id = reactable::colDef(header = "Taille"),
          q108_prix = reactable::colDef(header = "Prix")
        ),
        striped = TRUE,
        language = reactable_fr
      )
    )
  },
  striped = TRUE,
  language = reactable_fr
)

mesures_prix_inconsistentes

```

## Vraisemblance

```{r}
#| label: créer bases pour rechercher les points aberrants

# composer une base d'observations de prix et de poids avec les identifiants
mesures_poids_prix <- n_produit_unite_taille_par_entretien |>
	dplyr::select(
    interview__id, interview__key,
    produits__id, unites__id, tailles__id,
    q108_poids, q108_prix
  )

# créer une base de seuils
# pour chaque groupe de plus de 3 observations:
# calculer la médiate et l'écart absolu médian
# créer les seuils inférieurs et supérieurs de 2 écarts de la médiane
seuiles_poids_prix <- mesures_poids_prix |>
  dplyr::rename_with(
    .cols = c(q108_poids, q108_prix),
    .fn = ~ stringr::str_replace(
      string = .x,
      pattern = "q108_",
      replacement = ""
    )
  ) |>
	dplyr::group_by(produits__id, unites__id, tailles__id) |>
	dplyr::summarise(
    n_obs = dplyr::n(),
    dplyr::across(
      .cols = c(poids, prix),
      .fns = list(
        med = ~ stats::median(.x, na.rm = TRUE),
        mad = ~ stats::mad(.x, na.rm = TRUE)
      ),
      .names = "{.fn}_{.col}"
    )
  ) |>
  dplyr::ungroup() |>
	dplyr::filter(n_obs > 3) |>
	dplyr::mutate(
    # poids
    seuil_superieur_poids = med_poids + (2*mad_poids),
    seuil_inferieur_poids = med_poids - (2*mad_poids),
    # prix
    seuil_superieur_prix = med_prix + (2*mad_prix),
    seuil_inferieur_prix = med_prix - (2*mad_prix)
  )

# joindre les seuils aux observations
mesures_plus_seuils <- mesures_poids_prix |>
	dplyr::left_join(
    y = seuiles_poids_prix,
    by = dplyr::join_by(produits__id, unites__id, tailles__id)
  )

```

### Poids

```{r}
#| label: poids invraisemblables

poids_aberrants <- mesures_plus_seuils |>
	dplyr::filter(!is.na(med_poids)) |>
	dplyr::filter(
    !dplyr::between(
      x = q108_poids,
      left = seuil_inferieur_poids,
      right = seuil_superieur_poids
    )
  ) |>
  dplyr::mutate(
    dplyr::across(
      .cols = c(produits__id, unites__id, tailles__id),
      .fns = ~ labelled::to_character(.x, levels = "prefixed")
    ),
    raison = glue::glue("Le poids ({q108_poids}) n'est pas dans l'intervalle [ {seuil_inferieur_poids} , {seuil_superieur_poids} ], de 2 écarts absolus médians par rapport à la médiane ({med_poids}), calculée avec {n_obs} observations"),
    lien_entretien = glue::glue("{url_base}/{interview__id}"),
    interview__key = glue::glue("<a href='{lien_entretien}'>{interview__key}</a>")
  ) |>
	dplyr::select(
    interview__key,
    produits__id, unites__id, tailles__id,
    raison
  )

poids_aberrants_tbl <- reactable::reactable(
  data = poids_aberrants,
  columns = list(
    interview__key = reactable::colDef(
      header = "Entretien",
      maxWidth = 125,
      html = TRUE
    ),
    produits__id = reactable::colDef(header = "Produit"),
    unites__id = reactable::colDef(header = "Unité"),
    tailles__id = reactable::colDef(header = "Taille"),
    raison = reactable::colDef(
      header = "Problème",
      minWidth = 250
    )
  ),
  searchable = TRUE,
  language = reactable_fr
)

poids_aberrants_tbl

```

### Prix


```{r}
#| label: prix invraisemblables

prix_aberrants <- mesures_plus_seuils |>
	dplyr::filter(!is.na(med_prix)) |>
	dplyr::filter(
    !dplyr::between(
      x = q108_prix,
      left = seuil_inferieur_prix,
      right = seuil_superieur_prix
    )
  ) |>
  dplyr::mutate(
    dplyr::across(
      .cols = c(produits__id, unites__id, tailles__id),
      .fns = ~ labelled::to_character(.x, levels = "prefixed")
    ),
    raison = glue::glue("Le prix ({q108_prix}) n'est pas dans l'intervalle [ {seuil_inferieur_prix} , {seuil_superieur_prix} ], de 2 écarts absolus médians par rapport à la médiane ({med_prix}), calculée avec {n_obs} observations"),
    lien_entretien = glue::glue("{url_base}/{interview__id}"),
    interview__key = glue::glue("<a href='{lien_entretien}'>{interview__key}</a>")
  ) |>
	dplyr::select(
    interview__key,
    produits__id, unites__id, tailles__id,
    raison
  )

prix_aberrants_tbl <- reactable::reactable(
  data = prix_aberrants,
  columns = list(
    interview__key = reactable::colDef(
      header = "Entretien",
      maxWidth = 125,
      html = TRUE
    ),
    produits__id = reactable::colDef(header = "Produit"),
    unites__id = reactable::colDef(header = "Unité"),
    tailles__id = reactable::colDef(header = "Taille"),
    raison = reactable::colDef(
      header = "Problème",
      minWidth = 250
    )
  ),
  striped = TRUE,
  searchable = TRUE,
  language = reactable_fr
)

prix_aberrants_tbl

```